[project]
name = "file-operations"
description = "Helpers for working with files in charms. `pip install file-operations` and `import file_operations`"
readme = "README.md"
requires-python = ">=3.8"
authors = [
    {name="The Charm Tech team at Canonical Ltd.", email="charm-tech@lists.launchpad.net"},
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Intended Audience :: Developers",
    "Operating System :: POSIX :: Linux",
]
dynamic = ["version"]
dependencies = [
    "typing_extensions",
    "ops>=2.17",
]

[project.urls]
#"Repository" = "https://github.com/#/#"
#"Issues" = "https://github.com/#/#/issues"

[build-system]
requires = [
    "setuptools>=60",
]
build-backend = "setuptools.build_meta"

[tool.setuptools.dynamic]
version = {file = ["src/file_ops/_version.txt"]}

[tool.coverage.run]
dynamic_context = "test_function"
branch = true

[tool.coverage.report]
show_missing = true

# Linting tools configuration
[tool.ruff]
line-length = 99
target-version = "py38"
extend-exclude = ["__pycache__", "*.egg_info", "htmlcov"]

# Ruff formatter configuration
[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint]
select = [
    # flake8-builtins
    "A",
    # flake8-bugbear
    "B",
    # pyflakes-docstrings
    "D",
    # conventional names
    "C",
    # flake8-copyright
    "CPY",
    # Pycodestyle (error)
    "E",
    # Pyflakes
    "F",
    # flake8-logging-format
    "G",
    # isort
    "I001",
    # pep8-naming
    "N",
    # Perflint
    "PERF",
    # Ruff specific
    "RUF",
    # flake8-bandit
    "S",
    # flake8-simplify
    "SIM",
    # pyupgrade
    "UP",
    # Pycodestyle (warning)
    "W",
    # flake8-2020
    "YTT",
]
ignore = [
    # mccabe
    "C90",
    # Missing docstring in magic method
    "D105",
    # Missing docstring in `__init__`
    "D107",
    # Use of `assert` detected
    "S101",
    # `subprocess` module is possibly insecure
    "S404",
    # subprocess-without-shell-equals-true
    # S602 complains if shell is True, which is considered worse due to potential shell exploits
    # difficult to avoid without noqa, which then becomes meaningless boilerplate every time
    "S603",
    # start-process-with-partial-path
    # wants an absolute path to the executable as the first argument
    # seems impractical, so also results in noqa boilerplate
    "S607",
    # Return condition directly, prefer readability.
    "SIM103",
    # Use contextlib.suppress() instead of try/except: pass
    "SIM105",
    # Use a single `with` statement with multiple contexts instead of nested `with` statements
    "SIM117",

    # FIXME: enable this
    "CPY001",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    # All documentation linting.
    "D",

    # Hard-coded password string.
    "S105",
    # Hard-coded password function argument.
    "S106",

    # "Useless" expression.
    "B018",

    # Redefinition of unused (we import fixtures)
    "F811",

    # Setting a permissive mask on a file or directory
    "S103",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.codespell]
skip = [
    ".git",
    ".tox",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".vscode",
    "build",
    "htmlcov",
    "htmlcov-*",
    "venv",
    "icon.svg",
]
#ignore-words-list = [
#]
quiet-level = 3  # disable warnings about (1) wrong encoding + (2) binary files
